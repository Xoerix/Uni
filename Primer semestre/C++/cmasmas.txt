https://learning.oreilly.com/home/
biblioteca.tec.mx/oreilly
github codespaces
cuenta con el correo de la escuela tec.mx
username A01799387

github student developer pack
https://education.github.com/pack

https://github.com/GruposTEC/AD22TC1033-301


Live share


pwd ver posicion
ls / dir(windows) ver contenidos
mkdir (nombre) crea directorio
cd (nombre) entra a directorio
cd .. / cd.. (windows) salir del directorio

g++ -o myapp main.cpp compilar archivo

cp ../Makefile .   copiar 
make compila el archivo

./(nombre en el make file) corre el archivo

make clean borrar todo


&& and
|| or


std::cout <<

En terminal escribimos
ls (listar los archivos, que hay en ese directorio)
make (compila todos los archivos y une en un ejecutable myapp)
./myapp (corre el archivo)

 + stage changes
commit and push


int x;
float y;
char z;


#include <iostream>
using namespace std;
int main(){
    int data = 42;
    float fl = 38.42;
    char ch = 'y';
    string st = "Hola";
    cout << data << endl;
    cout << fl << endl;
    cout << ch << endl;
    cout << st << endl
    return 0;
}


the modifiers 

signed		Antes de int y char
unsigned	
long
short

double		para float. se puede usar tambien long double
		no se puede usar double float


    unsigned int a;
    short int b;


ejemplo
double float variable;
está mal

puedes escribir double o long double
ejemplo
double variable;
long double variable;
está bien


if
#include <iostream>
using namespace std;
int main(){
    int first, second;
    cout << "Escribe dos numeros";
    cin >> first >> second;
    
    if (first > second){
        cout << "First number is grater which is =" <<  first << endl;
    }
    return 0;
}

the syntax for if statement is
if (condition)
{
code to execute when condition satisfies
}


while / do while / for

syntax
while (condition)
{

}

#include <iostream>
using namespace std;
int main() {
    int a = 0;
    while (a < 5){
        cout << "Hello" << endl;
        a++;
    }
    return 0;
}


for

for (int i=0; i<5; i++){
    cout << i << endl;
}



FUNCIONES

#include <iostream>
using std::cout;
using std::cin;
using std::endl;

int main(){
    void print_hello(); //Function declaration, hay que declarar nombre de funciones
    cout << "This is main function" << endl;
    print_hello(); //Function call
    return 0;
}
void print_hello(){ //Function definition
    cout << "Hello" << endl;
}


FUNCIONES CON ARGUMENTOS

#include <iostream>
using namespace std;

void add(int, int);
int main(){
    int number1, number2;
    cout << "Enter two numbers";
    cin << number1 << number2;
    add(number1, number2);
    return 0;
}
void add(int a, int b){
    cout << Addition is " << a + b << endl;
}



PASS

#include <iostream>
using namespace std;

int add(int x);
main(){
    int data = 10;
    data = add(data); //passing data in add function
    cout << "Value in data = " << data << endl;
    retun 0;
}
int add(int x){
    int input; // variable to take input
    cout << "Enter the value to be added in data " << endl;
    cin >> input;
    x = x + input;
    return x;
}


#include <iostream>
using namespace std;
void add(int &x);
int main(){
    int data = 10;
    add(data); // passing in add function
    cout << "Value in data = " << data << endl;
    return 0;
}
void add (int &x){
    int input; //variable to take input
    cout << "Enter the value to be added in data " << endl;
    cin >> input;
    x = x + input;
}



void metodo que no regresa nada (python tutor)

paso por valor, copia de la variale, luego de imprimir borra esa copia del valor
si usa referencias(un tipo de pointer) & el cambio se mantiene, cambia el valor de Y
referencia solo hace alias a una variable y ya no se puede cambiar

apuntador tambien guarda direccion de alguna otra variable y se puede cambiar de
dirección

#include <iostream>
#include <vector>
using std::cout;
using std::vector;

void mi_metodo(int ar[], int valor, float &ref, float *ap1)
{
valor++;
ref++;
//*ap1++ cambia la direccion de la memoria
*ap1 = *ap1 + 1;

cout << "Dentro del metodo valor es: " valor << endl;
cout << "Dentro del metodo valor es: " ref << endl;
}

int main()
{
int x = 5;
float y = 10.54;
float z = 0;

float &ref = y //declaro referencia

float *ap = &y; //declaro apuntador

cout << "el valor a donde apunta ap es: " << *ap << endl;
// cout << "el apuntador apunta a la direccion: " << ap << endl; codigo malo sin *

ap = &z; 	// redirecciono al apuntador
int arr[3] = {0, 1, 2, 3}


mi_metodo(arr ,x, y, &z);
return 0;
}


arreglo pasan por referencia no por valor
conjunto de datos bajo un mismo nombre
necesitas recordar el tamaño del arreglo
int arr[]={0,1,2}; 	//forma uno
int arr[3];		//forma dos
    arr[0] = 0;
    arr[1] = 1;
    arr[2] = 2:



LISTAS PYTHON	VS	VECTOR C++
append			push_back
length			size
[indice]		[indice]

vector<float>miVector;

#include <string>
using std::string;


PROGRAMACION ORIENTEADA A OBJETOS
Lenguas procedurales, todo en un solo archivo
Vamos a usar archivos independientes trabajando de forma independiente
para un solo proyecto; 
clase, idea descripcion, definicion,clases que representan restaurante, usuario...
cosas invisibles
clases descrinem PROPIEDADES atributos(nombre, altura, edad  geneto) y METODOS acciones<lo que puedes
hacer> (caminar, correr...)
clase, la idea

encapsulacion meter metodos y propiedades

3 etapas de contruccion de objetos
analisis: abstraccion, identificar que es lo que vas a hacer
diseño: como lo vas a hacer
programación (convertir diseño a programa funcional): de un diseño completo, interpretas y programas


abstraccion
encapsulacion
{herencia
polimorfismo} se ven después

objeto, es una cosa del mundo real, carro, barco, libro, // cuenta de banco,
cosa que quieres comprar...
tienen un estado, comportamiento e identidad propia, diferente


ABSTRACCION: sacar caracteristicas esenciales de los objetos
que estas viendo, analisis
Simplificar la realidad, 
persona nombre:Kevin genero:hombre...
para crearlos necesitas una clase con atributos que describen al objeto
propiedades
nombre, apellido, genero, ocupacion
de un objeto se pueden crear varios objetos de la misma clase, cambiando sus
propiedades para ser diferentes

ENCAPSULACION:
Metodos para interactuar con un objeto pero no sabemos como funciona,
pregunta - respuesta,
acceso publico, a la vista
privado, pregunta lo que quieres saber
protegido...


tilde protegido, mas publico, menos privado, gato paquete.

PONG
Clases 
barras (propiedades	PRIVADOS -dimension: int, -color: int, -x: int, -y:int //Metods		+mover(parametro:int):int , +getter, +setters PUBLICOS)
pelota (			 -dim, -color,-x , -y)
escenario(			 -dimension, -color, -barra1:Barra(es de tipo barra, creaste tu propio tipo de dato, ya no es str, int...), -barra2:Barra, -pelota, -marcador) tiene un tipo de liga entre las clases

asociacion: usa -----
agregacion y composicion: tiene
agregacion: si los objetos son independientes o dependientes, un coche tiene llantas, si le quita las llantas, las llantas siguen siendo llantas? si, agregacion, ---rombo vacio
composicion: una persona le quita el corazon, no vive, composicion, rombo ----negro

pong & object oriented programming

archivo.drawio





PROYECTO 
Dado, Tablero, Jugadores, Escalera, Serpientes, Casillas


Jugadores
-color: string
-pos: int
-id: string
+getColor():string
+getPos():int
+getId():string
+setColor(string):void
+setPos(int):void
+setId(string):void