https://learning.oreilly.com/home/
biblioteca.tec.mx/oreilly
github codespaces
cuenta con el correo de la escuela tec.mx
username A01799387

github student developer pack
https://education.github.com/pack

https://github.com/GruposTEC/AD22TC1033-301

pwd ver posicion
ls / dir(windows) ver contenidos
mkdir (nombre) crea directorio
cd (nombre) entra a directorio
cd .. / cd.. (windows) salir del directorio

g++ -o myapp main.cpp compilar archivo

cp ../Makefile .   copiar 
make compila el archivo

./(nombre en el make file) corre el archivo

make clean borrar todo


&& and
|| or


std::cout <<

En terminal escribimos
ls (listar los archivos, que hay en ese directorio)
make (compila todos los archivos y une en un ejecutable myapp)
./myapp (corre el archivo)

 + stage changes
commit and push


int x;
float y;
char z;


#include <iostream>
using namespace std;
int main(){
    int data = 42;
    float fl = 38.42;
    char ch = 'y';
    string st = "Hola";
    cout << data << endl;
    cout << fl << endl;
    cout << ch << endl;
    cout << st << endl
    return 0;
}


the modifiers 

signed		Antes de int y char
unsigned	
long
short

double		para float. se puede usar tambien long double
		no se puede usar double float


    unsigned int a;
    short int b;


ejemplo
double float variable;
est치 mal

puedes escribir double o long double
ejemplo
double variable;
long double variable;
est치 bien


if
#include <iostream>
using namespace std;
int main(){
    int first, second;
    cout << "Escribe dos numeros";
    cin >> first >> second;
    
    if (first > second){
        cout << "First number is grater which is =" <<  first << endl;
    }
    return 0;
}

the syntax for if statement is
if (condition)
{
code to execute when condition satisfies
}


while / do while / for

syntax
while (condition)
{

}

#include <iostream>
using namespace std;
int main() {
    int a = 0;
    while (a < 5){
        cout << "Hello" << endl;
        a++;
    }
    return 0;
}


for

for (int i=0; i<5; i++){
    cout << i << endl;
}



FUNCIONES

#include <iostream>
using std::cout;
using std::cin;
using std::endl;

int main(){
    void print_hello(); //Function declaration, hay que declarar nombre de funciones
    cout << "This is main function" << endl;
    print_hello(); //Function call
    return 0;
}
void print_hello(){ //Function definition
    cout << "Hello" << endl;
}


FUNCIONES CON ARGUMENTOS

#include <iostream>
using namespace std;

void add(int, int);
int main(){
    int number1, number2;
    cout << "Enter two numbers";
    cin << number1 << number2;
    add(number1, number2);
    return 0;
}
void add(int a, int b){
    cout << Addition is " << a + b << endl;
}



PASS

#include <iostream>
using namespace std;

int add(int x);
main(){
    int data = 10;
    data = add(data); //passing data in add function
    cout << "Value in data = " << data << endl;
    retun 0;
}
int add(int x){
    int input; // variable to take input
    cout << "Enter the value to be added in data " << endl;
    cin >> input;
    x = x + input;
    return x;
}


#include <iostream>
using namespace std;
void add(int &x);
int main(){
    int data = 10;
    add(data); // passing in add function
    cout << "Value in data = " << data << endl;
    return 0;
}
void add (int &x){
    int input; //variable to take input
    cout << "Enter the value to be added in data " << endl;
    cin >> input;
    x = x + input;
}



void metodo que no regresa nada (python tutor)

paso por valor, copia de la variale, luego de imprimir borra esa copia del valor
si usa referencias(un tipo de pointer) & el cambio se mantiene, cambia el valor de Y
referencia solo hace alias a una variable y ya no se puede cambiar

apuntador tambien guarda direccion de alguna otra variable y se puede cambiar de
direcci칩n

#include <iostream>
#include <vector>
using std::cout;
using std::vector;

void mi_metodo(int ar[], int valor, float &ref, float *ap1)
{
valor++;
ref++;
//*ap1++ cambia la direccion de la memoria
*ap1 = *ap1 + 1;

cout << "Dentro del metodo valor es: " valor << endl;
cout << "Dentro del metodo valor es: " ref << endl;
}

int main()
{
int x = 5;
float y = 10.54;
float z = 0;

float &ref = y //declaro referencia

float *ap = &y; //declaro apuntador

cout << "el valor a donde apunta ap es: " << *ap << endl;
// cout << "el apuntador apunta a la direccion: " << ap << endl; codigo malo sin *

ap = &z; 	// redirecciono al apuntador
int arr[3] = {0, 1, 2, 3}


mi_metodo(arr ,x, y, &z);
return 0;
}


arreglo pasan por referencia no por valor
conjunto de datos bajo un mismo nombre
necesitas recordar el tama침o del arreglo
int arr[]={0,1,2}; 	//forma uno
int arr[3];		//forma dos
    arr[0] = 0;
    arr[1] = 1;
    arr[2] = 2:



LISTAS PYTHON	VS	VECTOR C++
append			push_back
length			size
[indice]		[indice]

vector<float>miVector;

#include <string>
using std::string;

